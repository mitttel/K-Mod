#include <SFML/Graphics.hpp>
#include <iostream>
#include <cmath>
#include <chrono>
#include <cstdlib>
#include <bits/stl_algo.h>

constexpr unsigned WINDOW_WIDTH = 1000;
constexpr unsigned WINDOW_HEIGHT = 1000;
constexpr float BALL_RADIUS = 5.f;
constexpr float MASS = 200.f;
constexpr float L = 200.f;
constexpr float l = 100.f;
constexpr float ELASTICITY_X = 1.f;
constexpr float ELASTICITY_Y = 1.f;
constexpr float MAX_SPEED = 1.f;

sf::Vector2f ballVelocity = {0.05f, 0.f};
sf::Vector2f centerVelocity = {0.f, 0.f};

int main()
{
    sf::RenderWindow window(sf::VideoMode({WINDOW_WIDTH, WINDOW_HEIGHT}), "Gravity Simulation");

    sf::CircleShape ball(BALL_RADIUS);
    ball.setFillColor(sf::Color::Green);

    sf::CircleShape shadowBall(BALL_RADIUS*0.5f);
    shadowBall.setFillColor(sf::Color::Red);

    sf::CircleShape center(BALL_RADIUS);
    center.setFillColor(sf::Color::Cyan);
    center.move({WINDOW_WIDTH / 2.f, WINDOW_HEIGHT / 2.f});

    ball.move({center.getPosition().x - l, center.getPosition().y - L});
    shadowBall.move(ball.getPosition());

    auto startTime = std::chrono::steady_clock::now();
    while (window.isOpen())
    {
        while (const std::optional event = window.pollEvent())
        {
            if (event->is<sf::Event::Closed>())
                window.close();
        }

        sf::Vector2f ballPos = ball.getPosition();
        sf::Vector2f centerPos = center.getPosition();
        sf::Vector2f shadowPos = shadowBall.getPosition();

        if (ballPos.x + 2 * BALL_RADIUS >= WINDOW_WIDTH || ballPos.x <= 0)
        {
            ballVelocity.x = -ballVelocity.x * ELASTICITY_X;
        }
        if (ballPos.y + 2 * BALL_RADIUS >= WINDOW_HEIGHT || ballPos.y <= 0)
        {
            ballVelocity.y = -ballVelocity.y * ELASTICITY_Y;
        }
        if (centerPos.x + 2 * BALL_RADIUS >= WINDOW_WIDTH || centerPos.x <= 0)
        {
            centerVelocity.x = -centerVelocity.x;
        }
        if (centerPos.y + 2 * BALL_RADIUS >= WINDOW_HEIGHT || centerPos.y <= 0)
        {
            centerVelocity.y = -centerVelocity.y;
        }

        float distance = std::sqrt(std::pow(ballPos.x - centerPos.x, 2) + std::pow(ballPos.y - centerPos.y, 2));
        float force = MASS / (distance * distance);

        ballVelocity.x += force * (centerPos.x - ballPos.x) / (distance * distance);
        ballVelocity.y += force * (centerPos.y - ballPos.y) / (distance * distance);

        auto elapsed_ms = std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::steady_clock::now() - startTime).count();

        std::cout << "Time: " << static_cast<float>(elapsed_ms) / 100 << " | x: " << ballPos.x << " | y: " << WINDOW_HEIGHT - ballPos.y << "\n";

        ballVelocity.x = std::clamp(ballVelocity.x, -MAX_SPEED, MAX_SPEED);
        ballVelocity.y = std::clamp(ballVelocity.y, -MAX_SPEED, MAX_SPEED);
        centerVelocity.x = std::clamp(centerVelocity.x, -MAX_SPEED, MAX_SPEED);
        centerVelocity.y = std::clamp(centerVelocity.y, -MAX_SPEED, MAX_SPEED);

        ball.move(ballVelocity);
        shadowBall.move({ballVelocity.x, ballVelocity.y + ((rand() % 21 - 10) * 0.01f)});
        center.move(centerVelocity);

        //window.clear(sf::Color::Black);
        window.draw(shadowBall);
        window.draw(ball);
        window.draw(shadowBall);
        window.draw(center);
        window.display();
    }
}
